// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dsn_cpp
Rcpp::NumericVector dsn_cpp(Rcpp::NumericVector x, double xi, double omega, double alpha, bool log_d);
RcppExport SEXP _snCpp_dsn_cpp(SEXP xSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dsn_cpp(x, xi, omega, alpha, log_d));
    return rcpp_result_gen;
END_RCPP
}
// psn_cpp
Rcpp::NumericVector psn_cpp(Rcpp::NumericVector x, double xi, double omega, double alpha, bool lower_tail, bool log_p);
RcppExport SEXP _snCpp_psn_cpp(SEXP xSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(psn_cpp(x, xi, omega, alpha, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qsn_cpp
Rcpp::NumericVector qsn_cpp(Rcpp::NumericVector p, double xi, double omega, double alpha, double tau, double tol);
RcppExport SEXP _snCpp_qsn_cpp(SEXP pSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(qsn_cpp(p, xi, omega, alpha, tau, tol));
    return rcpp_result_gen;
END_RCPP
}
// rsn_cpp
Rcpp::NumericVector rsn_cpp(int n, double xi, double omega, double alpha, double tau);
RcppExport SEXP _snCpp_rsn_cpp(SEXP nSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rsn_cpp(n, xi, omega, alpha, tau));
    return rcpp_result_gen;
END_RCPP
}
// dst_cpp
Rcpp::NumericVector dst_cpp(Rcpp::NumericVector x, double xi, double omega, double alpha, double nu, bool log_d);
RcppExport SEXP _snCpp_dst_cpp(SEXP xSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP nuSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dst_cpp(x, xi, omega, alpha, nu, log_d));
    return rcpp_result_gen;
END_RCPP
}
// pst_cpp
Rcpp::NumericVector pst_cpp(Rcpp::NumericVector x, double xi, double omega, double alpha, double nu, int method, bool lower_tail, bool log_p);
RcppExport SEXP _snCpp_pst_cpp(SEXP xSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP nuSEXP, SEXP methodSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pst_cpp(x, xi, omega, alpha, nu, method, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qst_cpp
Rcpp::NumericVector qst_cpp(Rcpp::NumericVector p, double xi, double omega, double alpha, double nu, double tol, int method);
RcppExport SEXP _snCpp_qst_cpp(SEXP pSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(qst_cpp(p, xi, omega, alpha, nu, tol, method));
    return rcpp_result_gen;
END_RCPP
}
// rst_cpp
Rcpp::NumericVector rst_cpp(int n, double xi, double omega, double alpha, double nu);
RcppExport SEXP _snCpp_rst_cpp(SEXP nSEXP, SEXP xiSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rst_cpp(n, xi, omega, alpha, nu));
    return rcpp_result_gen;
END_RCPP
}
// owens_T
Rcpp::NumericVector owens_T(Rcpp::NumericVector h, Rcpp::NumericVector a);
RcppExport SEXP _snCpp_owens_T(SEXP hSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(owens_T(h, a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_snCpp_dsn_cpp", (DL_FUNC) &_snCpp_dsn_cpp, 5},
    {"_snCpp_psn_cpp", (DL_FUNC) &_snCpp_psn_cpp, 6},
    {"_snCpp_qsn_cpp", (DL_FUNC) &_snCpp_qsn_cpp, 6},
    {"_snCpp_rsn_cpp", (DL_FUNC) &_snCpp_rsn_cpp, 5},
    {"_snCpp_dst_cpp", (DL_FUNC) &_snCpp_dst_cpp, 6},
    {"_snCpp_pst_cpp", (DL_FUNC) &_snCpp_pst_cpp, 8},
    {"_snCpp_qst_cpp", (DL_FUNC) &_snCpp_qst_cpp, 7},
    {"_snCpp_rst_cpp", (DL_FUNC) &_snCpp_rst_cpp, 5},
    {"_snCpp_owens_T", (DL_FUNC) &_snCpp_owens_T, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_snCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
